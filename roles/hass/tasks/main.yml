---

- name: Deploy Home Assistant
  community.docker.docker_compose:
    project_name: 'hass'
    definition:
      version: '3'
      services:
        hass:
          container_name: "hass"
          build: "{{ role_path }}/hass-image"
          volumes:
            - /docker/hass:/config
            - /etc/localtime:/etc/localtime:ro
          ports:
            - 4002:4002
          restart: always
          privileged: true
  when: inventory_hostname in groups.control_nodes

- name: Generate hass secrets
  template:
    src: secrets.yaml.j2
    dest: /docker/hass/secrets.yaml
    mode: 0400
  notify: Restart HASS

- name: Generate hass configuration
  template:
    src: configuration.yaml.j2
    dest: /docker/hass/configuration.yaml
    mode: 0600
  notify: Restart HASS
    
- name: Ensure existance of certificates directory
  file:
    path: "/docker/certbot/conf/live/{{ external_subdomains.hass }}.{{ domain_name }}"
    state: directory

- name: Check the existence of SLL certificate
  shell: test -e "/docker/certbot/conf/live/{{ external_subdomains.hass }}.{{ domain_name }}/privkey.pem"
  register: cert_exists
  ignore_errors: true
  changed_when: false

- name: Generate dummy certificates
  shell: |
    openssl req -x509 -nodes -newkey rsa:4096 -days 1 -keyout "/docker/certbot/conf/live/{{ external_subdomains.hass }}.{{ domain_name }}/privkey.pem" -out "/docker/certbot/conf/live/{{ external_subdomains.hass }}.{{ domain_name }}/fullchain.pem" -subj '/CN=localhost'
  when: cert_exists.rc != 0

- name: Generate NGINX reverse proxy template
  template:
    src: hass.conf.j2
    dest: /docker/nginx/sites-enabled/hass.conf
    mode: 0600
  notify: Restart NGINX

- name: Sync handlers
  meta: flush_handlers

- name: Renew certs
  shell: |
    rm -f /docker/certbot/conf/live/"{{ external_subdomains.lam }}.{{ domain_name }}"/*
    docker exec certbot certbot certonly --webroot -w /var/www/certbot -d "{{ external_subdomains.hass }}.{{ domain_name }}" --rsa-key-size 4096 --agree-tos --force-renewal --email "{{ letsencrypt_email }}" -n
  failed_when: False
  when: ((inventory_hostname in groups.control_nodes) and
        (cert_exists.rc != 0))

- name: Sync handlers
  meta: flush_handlers

- name: Copy preconfigured hass data
  synchronize:
    src: hass
    dest: /docker
  notify: Restart HASS

- name: Install hass LDAP sync script dnf dependencies
  dnf:
    name: ['gcc-toolset-11', 'python3-devel', 'openldap-devel']
    state: latest

- name: Install hass LDAP sync script pip dependencies
  pip:
    name: ['python-ldap']

- name: Copy hass LDAP sync script
  copy:
    src: hass-ldap-sync.py
    dest: /docker/hass/hass-ldap-sync.py
    mode: 700

- name: Generate hass LDAP sync config file
  template:
    src: hass-ldap-sync.json.j2
    dest: /docker/hass/hass-ldap-sync.json
    mode: 400