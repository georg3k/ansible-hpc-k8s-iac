---

- name: Create ZABBIX bind directory
  file:
    path: /docker/zabbix
    state: directory
    mode: 0775
  when: inventory_hostname in groups.control_nodes

- name: Deploy ZABBIX
  community.docker.docker_compose:
    project_name: 'zabbix'
    definition:
      version: '3'
      services:
        zabbix_postgres:
          container_name: zabbix_postgres
          image: postgres:13.6-alpine
          volumes:
            - /docker/zabbix/postgres:/var/lib/postgresql/data
            - /etc/localtime:/etc/localtime:ro
          environment:
            POSTGRES_DB: zabbixdb
            POSTGRES_USER: zabbix
            POSTGRES_PASSWORD: "{{ admin_password }}"
          restart: always
        zabbix_server:
          container_name: zabbix_server
          image: zabbix/zabbix-server-pgsql:5.4.10-alpine
          environment:
            DB_SERVER_HOST: zabbix_postgres
            DB_SERVER_PORT: 5432
            POSTGRES_DB: zabbixdb
            POSTGRES_USER: zabbix
            POSTGRES_PASSWORD: "{{ admin_password }}"
            ZBX_VALUECACHESIZE: 64M
            ZBX_CACHESIZE: 128M
            ZBX_TRENDCACHESIZE: 128M
            ZBX_IPMIPOLLERS: 5
          volumes:
            - /etc/openldap:/etc/openldap:ro
            - /etc/localtime:/etc/localtime:ro
          ports:
            - "10051:10051"
          restart: always
          depends_on:
            - zabbix_postgres
        zabbix_web:
          container_name: zabbix_web
          image: zabbix/zabbix-web-nginx-pgsql:5.4.10-alpine
          volumes:
            - /etc/openldap:/etc/openldap:ro
            - /etc/localtime:/etc/localtime:ro
          ports:
            - "4003:8080"
          environment:
            DB_SERVER_HOST: zabbix_postgres
            DB_SERVER_PORT: 5432
            POSTGRES_DB: zabbixdb
            POSTGRES_USER: zabbix
            POSTGRES_PASSWORD: "{{ admin_password }}"
            ZBX_SERVER_HOST: zabbix_server
            ZBX_SERVER_PORT: 10051
            PHP_TZ: Europe/Moscow
          restart: always
          depends_on:
            - zabbix_postgres
        zabbix_agent:
          container_name: zabbix_agent
          image: zabbix/zabbix-agent:latest
          restart: always
          environment:
            ZBX_HOSTNAME: zabbix_agent
            ZBX_SERVER_HOST: zabbix_server
          ports:
            - 10050:10050
          privileged: true
  when: inventory_hostname in groups.control_nodes

- name: Generate NGINX reverse proxy template
  template:
    src: zabbix.conf.j2
    dest: /docker/nginx/sites-enabled/zabbix.conf
    mode: 0600
  when: inventory_hostname in groups.control_nodes
  notify: Restart NGINX

- name: Sync handlers
  meta: flush_handlers

- name: Wait for ZABBIX to startup
  local_action:
    module: uri
    url: "http://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    follow_redirects: all
    method: GET
  register: result
  until: result.status == 200
  retries: 60
  delay: 10
  when: inventory_hostname in groups.control_nodes

- name: Change ZABBIX default password
  community.zabbix.zabbix_user:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: zabbix
    alias: Admin
    passwd: "{{ admin_password }}"
    override_passwd: yes
    usrgrps:
    - Zabbix administrators
    state: present
  register: result
  ignore_errors: True
  failed_when: False
  when: inventory_hostname in groups.control_nodes

- name: Update ZABBIX server host entry
  community.zabbix.zabbix_host:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    host_name: "Zabbix server"
    interfaces:
    - type: agent
      main: 1
      useip: 0
      port: '10050'
      dns: zabbix_agent
  when: inventory_hostname in groups.control_nodes

- name: Create ZABBIX user groups
  community.zabbix.zabbix_usergroup:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "{{ item }}"
    gui_access: LDAP
  with_items:
    - Admins
    - Users
  when: inventory_hostname in groups.control_nodes

- name: Create ZABBIX host groups
  community.zabbix.zabbix_group:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    host_groups:
      - Web cluster nodes
      - Compute cluster nodes
  when: inventory_hostname in groups.control_nodes

- name: Create ZABBIX discovery rule for web cluster nodes
  community.zabbix.zabbix_discovery_rule:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "Web cluster"
    iprange: "{{ networks.private.cidr | ipaddr('address') | ipmath(99) }}-{{ [(networks.private.cidr | ipaddr('address')).split('.')[3] | int + 198, 254] | min }}"
    dchecks:
        - type: Zabbix
          key: "system.hostname"
          name_source: DNS
          ports: '10050'
    state: present
    status: enabled
  when: inventory_hostname in groups.control_nodes

- name: Create ZABBIX discovery rule for compute cluster nodes
  community.zabbix.zabbix_discovery_rule:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "Compute cluster"
    iprange: "{{ networks.private.cidr | ipaddr('address') | ipmath(199) }}-{{ [(networks.private.cidr | ipaddr('address')).split('.')[3] | int + 299, 254] | min }}"
    dchecks:
        - type: Zabbix
          key: "system.hostname"
          name_source: DNS
          ports: '10050'
    state: present
    status: enabled
  when: inventory_hostname in groups.control_nodes

- name: Create ZABBIX discovery rule for web cluster IPMI interfaces
  community.zabbix.zabbix_discovery_rule:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "Web cluster IPMI"
    iprange: "{{ networks.management.cidr | ipaddr('address') | ipmath(99) }}-{{ [(networks.management.cidr | ipaddr('address')).split('.')[3] | int + 198, 254] | min }}"
    dchecks:
        - type: Zabbix
          key: "system.hostname"
          name_source: DNS
          ports: '10050'
    state: present
    status: enabled
  when: inventory_hostname in groups.control_nodes

- name: Create ZABBIX discovery rule for web compute IPMI interfaces
  community.zabbix.zabbix_discovery_rule:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "Compute cluster IPMI"
    iprange: "{{ networks.management.cidr | ipaddr('address') | ipmath(199) }}-{{ [(networks.management.cidr | ipaddr('address')).split('.')[3] | int + 299, 254] | min }}"
    dchecks:
        - type: Zabbix
          key: "system.hostname"
          name_source: DNS
          ports: '10050'
    state: present
    status: enabled
  when: inventory_hostname in groups.control_nodes

- name: Create discovery action for web cluster
  community.zabbix.zabbix_action:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "Web cluster group"
    event_source: 'discovery'
    state: present
    status: enabled
    esc_period: '60'
    conditions:
      - type: 'discovery_rule'
        operator: '='
        value: 'Web cluster'
      - type: 'discovered_service_type'
        operator: '='
        value: 'Zabbix agent'
    operations:
      - type: add_host
        templates: 'Linux by Zabbix agent'
      - type: add_to_host_group
        host_groups: 'Web cluster nodes'
  when: inventory_hostname in groups.control_nodes

- name: Create discovery action for compute cluster
  community.zabbix.zabbix_action:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "Compute cluster group"
    event_source: 'discovery'
    state: present
    status: enabled
    esc_period: '60'
    conditions:
      - type: 'discovery_rule'
        operator: '='
        value: 'Compute cluster'
      - type: 'discovered_service_type'
        operator: '='
        value: 'Zabbix agent'
    operations:
      - type: add_host
        templates: 'Linux by Zabbix agent'
      - type: add_to_host_group
        host_groups: 'Compute cluster nodes'
  when: inventory_hostname in groups.control_nodes

- name: Create discovery action for web cluster IPMI interfaces
  community.zabbix.zabbix_action:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "Web cluster IPMI group"
    event_source: 'discovery'
    state: present
    status: enabled
    esc_period: '60'
    conditions:
      - type: 'discovery_rule'
        operator: '='
        value: 'Web cluster IPMI'
      - type: 'discovered_service_type'
        operator: '='
        value: 'Zabbix agent'
    operations:
      - type: add_host
        templates: 'Linux by Zabbix agent'
      - type: add_to_host_group
        host_groups: 'Web cluster nodes'
  when: inventory_hostname in groups.control_nodes

- name: Create discovery action for compute cluster IPIM interfaces
  community.zabbix.zabbix_action:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "Compute cluster IPMI group"
    event_source: 'discovery'
    state: present
    status: enabled
    esc_period: '60'
    conditions:
      - type: 'discovery_rule'
        operator: '='
        value: 'Compute cluster IPMI'
      - type: 'discovered_service_type'
        operator: '='
        value: 'Zabbix agent'
    operations:
      - type: add_host
        templates: 'Linux by Zabbix agent'
      - type: add_to_host_group
        host_groups: 'Web cluster nodes'
  when: inventory_hostname in groups.control_nodes

- name: Setup ZABBIX Telegram bot
  community.zabbix.zabbix_mediatype:
    name: "Telegram"
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    type: 'webhook'
    webhook_script: "{{ lookup('file', 'telebot.js') }}"
    webhook_params:
      - name: 'Message'
        value: '{ALERT.MESSAGE}'
      - name: 'ParseMode'
        value: ''
      - name: 'Subject'
        value: '{ALERT.SUBJECT}'
      - name: 'To'
        value: '{ALERT.SENDTO}'
      - name: 'Token'
        value: "{{ telegram_token }}"
  when: inventory_hostname in groups.control_nodes

- name: Install EPEL
  dnf:
    name: 'epel-release'
    state: latest
  when: inventory_hostname not in groups.control_nodes

- name: Install ZABBIX agent
  dnf:
    name: ['zabbix40-agent']
    state: latest
  when: inventory_hostname not in groups.control_nodes

- name: Copy ZABBIX agent configuration
  template:
    src: zabbix_agentd.conf.j2
    dest: /etc/zabbix_agentd.conf
    mode: 644
  when: inventory_hostname not in groups.control_nodes
  
- name: Start and enable ZABBIX agent
  service:
    name: zabbix-agent
    state: started
    enabled: true
  when: inventory_hostname not in groups.control_nodes

- name: Allow ZABBIX agent traffic
  ansible.posix.firewalld:
    port: 10050/tcp
    zone: private
    permanent: yes
    state: enabled
  notify: Reload firewalld
  when: inventory_hostname not in groups.control_nodes

- name: Install ZABBIX LDAP sync script dnf dependencies
  dnf:
    name: ['gcc-toolset-11', 'python3-devel', 'openldap-devel']
    state: latest
  when: inventory_hostname in groups.control_nodes

- name: Install ZABBIX LDAP sync script pip dependencies
  pip:
    name: 'python-ldap'
  when: inventory_hostname in groups.control_nodes

- name: Copy ZABBIX LDAP sync script
  copy:
    src: zabbix-ldap-sync.py
    dest: /root/zabbix-ldap-sync.py
    mode: 700
  when: inventory_hostname in groups.control_nodes

- name: Generate ZABBIX LDAP sync config file
  template:
    src: zabbix-ldap-sync.json.j2
    dest: /root/zabbix-ldap-sync.json
    mode: 400
  when: inventory_hostname in groups.control_nodes

- name: Enable sync script to run every minute
  cron:
    name: "Sync ZABBIX with LDAP"
    minute: '*/1'
    user: root
    job: "/root/zabbix-ldap-sync.py"
    cron_file: zabbix_ldap
  when: inventory_hostname in groups.control_nodes
