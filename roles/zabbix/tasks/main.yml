---

- name: Create ZABBIX bind directory
  file:
    path: /docker/zabbix
    state: directory
    mode: 0775
  when: inventory_hostname in groups.control_nodes

- name: Deploy ZABBIX
  community.docker.docker_compose:
    project_name: 'zabbix'
    definition:
      version: '3'
      services:
        zabbix_postgres:
          container_name: zabbix_postgres
          image: postgres:13.6-alpine
          volumes:
            - /docker/zabbix/postgres:/var/lib/postgresql/data
            - /etc/localtime:/etc/localtime:ro
          environment:
            POSTGRES_DB: zabbixdb
            POSTGRES_USER: zabbix
            POSTGRES_PASSWORD: "{{ admin_password }}"
          restart: always
        zabbix_server:
          container_name: zabbix_server
          image: zabbix/zabbix-server-pgsql:5.4.10-alpine
          environment:
            DB_SERVER_HOST: zabbix_postgres
            DB_SERVER_PORT: 5432
            POSTGRES_DB: zabbixdb
            POSTGRES_USER: zabbix
            POSTGRES_PASSWORD: "{{ admin_password }}"
            ZBX_VALUECACHESIZE: 64M
            ZBX_CACHESIZE: 128M
            ZBX_TRENDCACHESIZE: 128M
            ZBX_IPMIPOLLERS: 5
          volumes:
            - /etc/openldap:/etc/openldap:ro
            - /etc/localtime:/etc/localtime:ro
          ports:
            - "10051:10051"
          restart: always
          depends_on:
            - zabbix_postgres
        zabbix_web:
          container_name: zabbix_web
          image: zabbix/zabbix-web-nginx-pgsql:5.4.10-alpine
          volumes:
            - /etc/openldap:/etc/openldap:ro
            - /etc/localtime:/etc/localtime:ro
          ports:
            - "4003:8080"
          environment:
            DB_SERVER_HOST: zabbix_postgres
            DB_SERVER_PORT: 5432
            POSTGRES_DB: zabbixdb
            POSTGRES_USER: zabbix
            POSTGRES_PASSWORD: "{{ admin_password }}"
            ZBX_SERVER_HOST: zabbix_server
            ZBX_SERVER_PORT: 10051
            PHP_TZ: Europe/Moscow
          restart: always
          depends_on:
            - zabbix_postgres
        zabbix_agent:
          container_name: zabbix_agent
          image: zabbix/zabbix-agent:latest
          restart: always
          environment:
            ZBX_HOSTNAME: zabbix_agent
            ZBX_SERVER_HOST: zabbix_server
          ports:
            - 10050:10050
          privileged: true
  when: inventory_hostname in groups.control_nodes
    
- name: Ensure existance of certificates directory
  file:
    path: "/docker/certbot/conf/live/{{ external_subdomains.zabbix }}.{{ domain_name }}"
    state: directory

- name: Check the existence of SLL certificate
  shell: test -e "/docker/certbot/conf/live/{{ external_subdomains.zabbix }}.{{ domain_name }}/privkey.pem"
  register: cert_exists
  ignore_errors: true
  changed_when: false
  when: inventory_hostname in groups.control_nodes

- name: Generate dummy certificates
  shell: |
    openssl req -x509 -nodes -newkey rsa:4096 -days 1 -keyout "/docker/certbot/conf/live/{{ external_subdomains.zabbix }}.{{ domain_name }}/privkey.pem" -out "/docker/certbot/conf/live/{{ external_subdomains.zabbix }}.{{ domain_name }}/fullchain.pem" -subj '/CN=localhost'
  when: ((inventory_hostname in groups.control_nodes) and
        (cert_exists.rc != 0))

- name: Generate NGINX reverse proxy template
  template:
    src: zabbix.conf.j2
    dest: /docker/nginx/sites-enabled/zabbix.conf
    mode: 0600
  when: inventory_hostname in groups.control_nodes
  notify: Restart NGINX

- name: Sync handlers
  meta: flush_handlers

- name: Renew certs
  shell: |
    rm -f /docker/certbot/conf/live/"{{ external_subdomains.lam }}.{{ domain_name }}"/*
    docker exec certbot certbot certonly --webroot -w /var/www/certbot -d "{{ external_subdomains.zabbix }}.{{ domain_name }}" --rsa-key-size 4096 --agree-tos --force-renewal --email "{{ letsencrypt_email }}" -n
  failed_when: False
  when: ((inventory_hostname in groups.control_nodes) and
        (cert_exists.rc != 0))

- name: Sync handlers
  meta: flush_handlers

- name: Wait for ZABBIX to startup
  local_action:
    module: uri
    url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    follow_redirects: all
    method: GET
    validate_certs: no
  register: result
  until: result.status == 200
  retries: 60
  delay: 10
  when: inventory_hostname in groups.control_nodes

- name: Change ZABBIX default password
  community.zabbix.zabbix_user:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: zabbix
    alias: Admin
    passwd: "{{ admin_password }}"
    override_passwd: yes
    usrgrps:
    - Zabbix administrators
    validate_certs: False
    state: present
  register: result
  ignore_errors: True
  failed_when: False
  when: inventory_hostname in groups.control_nodes

- name: Import HASS integration temaplate from XML
  local_action:
    module: community.zabbix.zabbix_template
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    template_xml: "{{ lookup('file', 'hass_receiver.xml') }}"
    state: present
    validate_certs: False
  changed_when: false
  when: inventory_hostname in groups.control_nodes

- name: Update ZABBIX server host entry
  community.zabbix.zabbix_host:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    host_name: "Zabbix server"
    host_groups:
    - "Zabbix servers"
    link_templates:
    - "Linux by Zabbix agent"
    - "Zabbix server health"
    - "Template Home Assistant"
    interfaces:
    - type: agent
      main: 1
      useip: 0
      port: '10050'
      dns: zabbix_agent
    validate_certs: False
  when: inventory_hostname in groups.control_nodes

- name: Create ZABBIX host groups
  community.zabbix.zabbix_group:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    host_groups:
      - k8s cluster nodes
      - CPU cluster nodes
      - GPU cluster nodes
      - NAS
      - UPS
      - CISCO switches
      - Mellanox switches
    validate_certs: False
  when: inventory_hostname in groups.control_nodes

- name: Setup ZABBIX Telegram bot
  community.zabbix.zabbix_mediatype:
    name: "Telegram"
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    type: 'webhook'
    webhook_script: "{{ lookup('file', 'telebot.js') }}"
    webhook_params:
      - name: 'Message'
        value: '{ALERT.MESSAGE}'
      - name: 'ParseMode'
        value: ''
      - name: 'Subject'
        value: '{ALERT.SUBJECT}'
      - name: 'To'
        value: '{ALERT.SENDTO}'
      - name: 'Token'
        value: "{{ telegram_token }}"
    validate_certs: False
  when: inventory_hostname in groups.control_nodes

- name: Create ZABBIX admin user group
  community.zabbix.zabbix_usergroup:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "Admins"
    gui_access: LDAP
    rights:
      - host_group: "Zabbix servers"
        permission: read-write
      - host_group: "k8s cluster nodes"
        permission: read-write
      - host_group: "CPU cluster nodes"
        permission: read-write
      - host_group: "GPU cluster nodes"
        permission: read-write
      - host_group: "UPS"
        permission: read-write
      - host_group: "NAS"
        permission: read-write
      - host_group: "CISCO switches"
        permission: read-write
      - host_group: "Mellanox switches"
        permission: read-write
    validate_certs: False
  when: inventory_hostname in groups.control_nodes

- name: Create ZABBIX regular user group
  community.zabbix.zabbix_usergroup:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "Users"
    gui_access: LDAP
    rights:
      - host_group: "Zabbix servers"
        permission: read-only
      - host_group: "k8s cluster nodes"
        permission: read-write
      - host_group: "CPU cluster nodes"
        permission: read-only
      - host_group: "GPU cluster nodes"
        permission: read-only
      - host_group: "UPS"
        permission: read-only
      - host_group: "NAS"
        permission: read-only
      - host_group: "CISCO switches"
        permission: read-only
      - host_group: "Mellanox switches"
        permission: read-only
    validate_certs: False
  when: inventory_hostname in groups.control_nodes

- name: Enable messages trigger action
  community.zabbix.zabbix_action:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    name: "Report problems to administrators"
    event_source: 'trigger'
    state: present
    status: enabled
    esc_period: '60'
    operations:
      - type: send_message
        send_to_groups:
          - 'Admins'
    validate_certs: False
  when: inventory_hostname in groups.control_nodes

- name: Install EPEL
  dnf:
    name: 'epel-release'
    state: latest
  when: inventory_hostname not in groups.control_nodes

- name: Install ZABBIX agent
  dnf:
    name: ['zabbix40-agent']
    state: latest
  when: inventory_hostname not in groups.control_nodes

- name: Copy ZABBIX agent configuration
  template:
    src: zabbix_agentd.conf.j2
    dest: /etc/zabbix_agentd.conf
    mode: 644
  when: inventory_hostname not in groups.control_nodes
  
- name: Start and enable ZABBIX agent
  service:
    name: zabbix-agent
    state: started
    enabled: true
  when: inventory_hostname not in groups.control_nodes

- name: Install ZABBIX LDAP sync script dnf dependencies
  dnf:
    name: ['gcc-toolset-11', 'python3-devel', 'openldap-devel']
    state: latest
  when: inventory_hostname in groups.control_nodes

- name: Install ZABBIX LDAP sync script pip dependencies
  pip:
    name: 'python-ldap'
  when: inventory_hostname in groups.control_nodes

- name: Copy ZABBIX LDAP sync script
  copy:
    src: zabbix-ldap-sync.py
    dest: /root/zabbix-ldap-sync.py
    mode: 700
  when: inventory_hostname in groups.control_nodes

- name: Generate ZABBIX LDAP sync config file
  template:
    src: zabbix-ldap-sync.json.j2
    dest: /root/zabbix-ldap-sync.json
    mode: 400
  when: inventory_hostname in groups.control_nodes

- name: Enable sync script to run every minute
  cron:
    name: "Sync ZABBIX with LDAP"
    minute: '*/30'
    user: root
    job: "/root/zabbix-ldap-sync.py"
    cron_file: zabbix_ldap
  when: inventory_hostname in groups.control_nodes

- name: Create k8h hosts
  community.zabbix.zabbix_host:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    host_name: "{{ hostvars[item].inventory_hostname }}"
    host_groups:
    - "k8s cluster nodes"
    inventory_mode: automatic
    link_templates:
    - "Linux by Zabbix agent"
    - "Chassis by IPMI"
    ipmi_privilege: 2
    ipmi_username: admin
    ipmi_password: admin
    interfaces:
    - type: agent
      main: 1
      useip: 0
      port: '10050'
      ip: "{{ (networks.private.cidr | ipaddr('address')) | ipmath(groups['k8s_nodes'].index(item) + 99) }}"
      dns: "{{ hostvars[item].inventory_hostname + '.' + domain_name }}"
    - type: ipmi
      main: 1
      useip: 0
      port: '623'
      ip: "{{ (networks.management.cidr | ipaddr('address')) | ipmath(groups['k8s_nodes'].index(item) + 99) }}"
      dns: "{{ hostvars[item].inventory_hostname + '.management.' + domain_name }}"
    validate_certs: False
    state: present
  with_items:
    - '{{ groups["k8s_nodes"] }}'
  when: inventory_hostname in groups.control_nodes

- name: Create CPU hosts
  community.zabbix.zabbix_host:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    host_name: "{{ hostvars[item].inventory_hostname }}"
    host_groups:
    - "CPU cluster nodes"
    inventory_mode: automatic
    link_templates:
    - "Linux by Zabbix agent"
    - "Chassis by IPMI"
    ipmi_privilege: 2
    ipmi_username: admin
    ipmi_password: admin
    interfaces:
    - type: agent
      main: 1
      useip: 0
      port: '10050'
      ip: "{{ (networks.private.cidr | ipaddr('address')) | ipmath(groups['cpu_nodes'].index(item) + 149) }}"
      dns: "{{ hostvars[item].inventory_hostname + '.' + domain_name }}"
    - type: ipmi
      main: 1
      useip: 0
      port: '623'
      ip: "{{ (networks.management.cidr | ipaddr('address')) | ipmath(groups['cpu_nodes'].index(item) + 149) }}"
      dns: "{{ hostvars[item].inventory_hostname + '.management.' + domain_name }}"
    validate_certs: False
    state: present
  with_items:
    - '{{ groups["cpu_nodes"] }}'
  when: inventory_hostname in groups.control_nodes

- name: Create GPU hosts
  community.zabbix.zabbix_host:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    host_name: "{{ hostvars[item].inventory_hostname }}"
    host_groups:
    - "GPU cluster nodes"
    inventory_mode: automatic
    link_templates:
    - "Linux by Zabbix agent"
    - "Chassis by IPMI"
    ipmi_privilege: 2
    ipmi_username: admin
    ipmi_password: admin
    interfaces:
    - type: agent
      main: 1
      useip: 0
      port: '10050'
      ip: "{{ (networks.private.cidr | ipaddr('address')) | ipmath(groups['gpu_nodes'].index(item) + 199) }}"
      dns: "{{ hostvars[item].inventory_hostname + '.' + domain_name }}"
    - type: ipmi
      main: 1
      useip: 0
      port: '623'
      ip: "{{ (networks.management.cidr | ipaddr('address')) | ipmath(groups['gpu_nodes'].index(item) + 199) }}"
      dns: "{{ hostvars[item].inventory_hostname + '.management.' + domain_name }}"
    validate_certs: False
    state: present
  with_items:
    - '{{ groups["gpu_nodes"] }}'
  when: inventory_hostname in groups.control_nodes

- name: Create NAS hosts
  community.zabbix.zabbix_host:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    host_name: "{{ hostvars[item].inventory_hostname }}"
    host_groups:
    - "NAS"
    inventory_mode: automatic
    link_templates:
    - "Generic SNMP"
    interfaces:
    - type: snmp
      main: 1
      useip: 0
      port: '161'
      ip: "{{ (networks.private.cidr | ipaddr('address')) | ipmath(groups['nas'].index(item) + 69) }}"
      dns: "{{ hostvars[item].inventory_hostname + '-management.' + domain_name }}"
      details:
        version: 2
        community: hpc
    validate_certs: False
    state: present
  with_items:
    - '{{ groups["nas"] }}'
  when: inventory_hostname in groups.control_nodes

- name: Create UPS hosts
  community.zabbix.zabbix_host:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    host_name: "{{ hostvars[item].inventory_hostname }}"
    host_groups:
    - "UPS"
    inventory_mode: automatic
    link_templates:
    - "APC UPS SNMP"
    interfaces:
    - type: snmp
      main: 1
      useip: 0
      port: '161'
      ip: "{{ (networks.management.cidr | ipaddr('address')) | ipmath(groups['ups'].index(item) + 89) }}"
      dns: "{{ hostvars[item].inventory_hostname + '.management.' + domain_name }}"
      details:
        version: 2
        community: hpc
    validate_certs: False
    state: present
  with_items:
    - '{{ groups["ups"] }}'
  when: inventory_hostname in groups.control_nodes

- name: Create CISCO switches hosts
  community.zabbix.zabbix_host:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    host_name: "{{ hostvars[item].inventory_hostname }}"
    host_groups:
    - "CISCO switches"
    inventory_mode: automatic
    link_templates:
    - "Cisco IOS SNMP"
    interfaces:
    - type: snmp
      main: 1
      useip: 0
      port: '161'
      ip: "{{ (networks.private.cidr | ipaddr('address')) | ipmath(groups['cisco_switches'].index(item) + 79) }}"
      dns: "{{ hostvars[item].inventory_hostname + '.' + domain_name }}"
      details:
        version: 2
        community: hpc
    validate_certs: False
    state: present
  with_items:
    - '{{ groups["cisco_switches"] }}'
  when: inventory_hostname in groups.control_nodes

- name: Create Mellanox switches hosts
  community.zabbix.zabbix_host:
    server_url: "https://{{ external_subdomains.zabbix }}.{{ domain_name }}"
    login_user: Admin
    login_password: "{{ admin_password }}"
    host_name: "{{ hostvars[item].inventory_hostname }}"
    host_groups:
    - "Mellanox switches"
    inventory_mode: automatic
    link_templates:
    - "Mellanox SNMP"
    interfaces:
    - type: snmp
      main: 1
      useip: 0
      port: '161'
      ip: "{{ (networks.private.cidr | ipaddr('address')) | ipmath(groups['mellanox_switches'].index(item) + 89) }}"
      dns: "{{ hostvars[item].inventory_hostname + '.' + domain_name }}"
      details:
        version: 2
        community: hpc
    validate_certs: False
    state: present
  with_items:
    - '{{ groups["mellanox_switches"] }}'
  when: inventory_hostname in groups.control_nodes
